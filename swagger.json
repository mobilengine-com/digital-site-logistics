{
  "openapi": "3.0.1",
  "info": {
    "title": "Digital Terrain Logistics Standard - Technical Guide",
    "description": "﻿\r\n## Introduction\r\n\r\nThe Delivery Note API is a REST API for creating delivery notes, getting a printable QR code for a delivery note and checking the status of the created delivery note.\r\n\r\nThe Products API supports querying and creating products used in delivery notes.\r\n\r\n## Security\r\nAccess to the API is only allowed when the request contains an API key.\r\nThe API key must be sent in the HTTP Authorization header, with the Bearer authentication scheme:\r\n\r\n```\r\nAuthorization: Bearer MyApiKey123\r\n```\r\n\r\nRequests without an API key or with an invalid API key will result in a HTTP 401 error code.\r\n\r\nThere are no fine-grained access rights, every API key allows clients to execute read and write operations through the API.\r\n\r\nThe API is only accessible through HTTPS.\r\n\r\n### Getting an API key\r\nAdministering API keys is done via the BauApp web interface.\r\n\r\nThe sandbox server accepts any API key that matches the regex `DTLS[0-9]{6}.*`.\r\n\r\nWhen using this api key, the beginning of the API key will identify the company that you're authenticated as.\r\n\r\n__Do not store live data on the sandbox server.__\r\n\r\n## Main use case\r\nThe main usage scenario when creating delivery notes is the following.\r\n\r\n1. Create products with the [products endpoints](#tag/Products). This is optional if you already have products defined in DTLS.\r\n\r\n2. (Optional) Check if your delivery note contains a DTLS recipient. \r\nSee the [Get the pattern for DTLS company Ids](#operation/get_dtls_id_pattern) section. \r\nOr you can check whether your fields contain a DTLS company identifier with the [Check if a text field contains a DTLS company Id](#operation/check_dtls_id) endpoint.\r\n\r\n3. Create a [delivery note](#tag/Delivery-Notes).\r\n     \r\n4. Get the QR code for the created delivery note.\r\n\r\n5. Use the QR code somewhere on your physical delivery note document.\r\n\r\n6. Poll the delivery note for status changes. The status field of the delivery note is updated shortly after the QR code is scanned by the recipient of the delivery.\r\n\r\n7. Download the delivery receipt PDF.\r\n\r\n## API Conventions\r\n\r\n### Message format\r\nThe API consumes and produces JSON messages, with the exception of the QR code endpoint, which returns an image.\r\n\r\nThe encoding of the JSON messages must be UTF-8.\r\n\r\nDate fields are formatted like `2020-12-31` according to OpenAPI specs.\r\nDatetime values are formatted like `2020-12-31T23:59:59Z` for UTC datetimes, and `2020-12-31T23:59:59+02:00` for datetimes with an offset.\r\n\r\nSee [http://spec.openapis.org/oas/v3.0.3#data-types](http://spec.openapis.org/oas/v3.0.3#data-types) for the specification details.\r\n\r\n### Paging\r\n\r\nSome endpoints can potentially return a large number of objects, for example the `/products` endpoint.\r\n\r\nThese endpoints only return a _page_ of objects at once. To receive the next page, \r\ncall the same endpoint with a `from` parameter. The from parameter should contain the last\r\nidentifier received in the previous endpoint request. The response for this reques will \r\ncontain objects starting with (but not including) the object identified in the `from` parameter.\r\n\r\nTo read all objects, proceed to do this in a loop until you get an empty response.\r\n\r\nThe `from` field must contain the id of an existing object, otherwise a HTTP 404 error occurs.\r\n\r\n#### Example: Reading all products\r\n\r\n1. Make a GET request to /products, let's say you receive this page (product details are omitted for the example):\r\n> [\r\n>   { id: 'p34' },\r\n>   { id: 'p67' },\r\n>   { id: 'p23' }\r\n> ]\r\n\r\n2. Make a GET request with the last ID to `/products?from=p23`, receive this page:\r\n> [\r\n>   { id: 'p11' },\r\n>   { id: 'p76' }\r\n> ]\r\n\r\nNote that the product with ID p23 is not included in this page.\r\n\r\n3. Make a GET request with the last ID to `/products?from=p76`, receive this page:\r\n> []\r\n\r\n4. Since the response is an empty list you're done querying all products\r\n\r\n### String length restrictions\r\n\r\nString length restrictions specified on fields are to be interpreted as the \r\nnumber of bytes in the UTF-8 encoded string, not as unicode character count.\r\n\r\nSo the length specified only applies if you don't use any multibyte characters.\r\n\r\n### Common response codes\r\n\r\nAside from the responses documented for each endpoint, the following common repsonse codes are used.\r\n\r\n#### HTTP 401 Unauthorized\r\nReturned if the API key is missing or invalid.\r\n\r\n#### HTTP 403 Forbidden\r\nThe API key used for this request is valid, but is not allowed to access this resource.\r\n\r\n#### HTTP 404 Not found\r\nCommonly used when querying resources by an identifier, if that resource is not found. \r\n\r\n#### HTTP 413 Payload too large\r\nReturned when the request body is too large. \r\nThis may happen if the created resource (product or delivery note) is unusually large.\r\nAll requests sizes are limited to 256KiB.\r\n\r\n#### HTTP 429 Too many requests\r\nReturned when the API rate limit is exceeded.\r\n\r\n## API Limitations\r\n\r\n### Data retention\r\nThe production server keeps products and delivery notes indefinitely. \r\nThis may change in future implementations of the API.\r\n\r\nThe data on the sandbox server is removed on a regular basis.\r\n\r\n### Rate limiting\r\nRate limiting is based on the provided API key.\r\nIf too many requests are sent in a period of time the server responds with HTTP 429 messages.\r\n\r\nExplicit rate limit values are to be determined later.\r\n\r\nRate limits on the sandbox server may be stricter than on the production server.\r\n\r\n### Request size\r\nThe request body size of create (POST) operations is limited. See each create operation for the exact size limits.\r\n",
    "contact": {
      "name": "BauApp",
      "url": "https://bauapp.hu/api",
      "email": "hello@bauapp.com"
    },
    "version": "v15"
  },
  "servers": [
    {
      "url": "https://sandbox.dtls.example.net",
      "description": "Sandbox"
    },
    {
      "url": "https://live.dtls.example.net",
      "description": "Production"
    }
  ],
  "paths": {
    "/api/v15/delivery_notes": {
      "post": {
        "tags": [
          "Delivery Notes"
        ],
        "summary": "Create a new delivery note",
        "description": "All the products in the delivery note must be created before creating a delivery note.The delivery note with the specified id must not exist yet.\n\nThe API doesn't allow updating delivery notes after creation.You should just create a new note if a created note contains an error.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiNewDeliveryNote"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiNewDeliveryNote"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiNewDeliveryNote"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The delivery note was created. The created delivery note is returned in the resposne body.The Location header in the response is set to the URL of the created delivery note.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDeliveryNote"
                }
              }
            }
          },
          "400": {
            "description": "An invalid delivery note was specified in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "An delivery note with this ID already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "413": {
            "description": "The request is too large.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Delivery Notes"
        ],
        "summary": "List delivery notes",
        "description": "Returns delivery notes.\nThe delivery notes are ordered so that the first ones are the ones that are most recently made available to be queried through the API.This way when polling for new orders, you should only need to check the first page(s).This ordering is not necessarily the same as a descending ordering by `creationDate`, because delivery notes created through the web UI may take longer to be visible through the API.\n\nThe endpoint uses paging, so it doesn't return all delivery notes at once.\n\nTo get the next page of notes call the endpoint with the `from` parameter, using the ID of the oldest (last) note that you received.",
        "parameters": [
          {
            "name": "fromUuid",
            "in": "query",
            "description": "The result will only contain items starting at (but not including) this one.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiDeliveryNote"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The delivery note specified in the `from` field cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v15/delivery_notes/search": {
      "get": {
        "tags": [
          "Delivery Notes"
        ],
        "summary": "Search delivery notes",
        "description": "Currently the search only supports finding delivery notes by the `supplierId`\n\nThe response contains all matches, no paging is used.\n\nIn rare cases there may be more than one delivery notes with the same supplierId.\n\nFor example when you're a haulier company and you have access to many companies delivery notes, and two happen to share the same supplierId.",
        "parameters": [
          {
            "name": "supplierId",
            "in": "query",
            "description": "The supplier's identifier of the delivery note, as supplied in the `supplierId` field when creating the delivery note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested delivery note",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiDeliveryNote"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No delivery note was found with the specified supplierId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v15/delivery_notes/{uuid}": {
      "get": {
        "tags": [
          "Delivery Notes"
        ],
        "summary": "Get a delivery note by UUID",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "The UUID of the delivery note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested delivery note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDeliveryNote"
                }
              }
            }
          },
          "404": {
            "description": "No delivery note was found with the specified uuid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v15/delivery_notes/{uuid}/qr_code": {
      "get": {
        "tags": [
          "Delivery Notes"
        ],
        "summary": "Get the QR code for a delivery note",
        "description": "Returns an image of a QR code containing a link to the delivery note.\n\nYou can include this image on your own documents, and the QR code can be scanned with the mobile app during delivery.\n\n**Try to print the QR code as large as you can. This will make scanning easier and will also protect against damage and staining.**\n**We recommend at least 3cm by 3cm.**",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The QR code in PNG format.\n\nThe exact size of the image is undefined.\n\nThe QR code contains the same URI that is in the `uri` field of the delivery note."
          },
          "404": {
            "description": "The delivery note with the speified id was not found",
            "content": {
              "image/png": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v15/delivery_notes/{uuid}/receipt": {
      "get": {
        "tags": [
          "Delivery Notes"
        ],
        "summary": "Get the receipt PDF for a delivery note",
        "description": "Download the receipt for the delivery note - a .pdf report confirming the delivery, with comments and information supplied by the recipient.\n\nOnly available after the delivery note was received, see the `status` field on the delivery note.",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery note PDF"
          },
          "404": {
            "description": "The delivery note with the speified id was not found, or it's not in the `received` state yet.",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v15/dtls_id_pattern": {
      "get": {
        "tags": [
          "Delivery Notes"
        ],
        "summary": "Get the pattern for DTLS company Ids",
        "description": "> Before starting the process, the suppliers have two options to check if they should get a QR code for their delivery note: \r\n> 1. only send the delivery address so the DTLS system can check if it contains the DTLS Company ID or\r\n> 2. get the format of the DTLS Company ID so the supplier's ERP system can check if it contains the DTLS Company ID\r\n\r\nThe DLTS API requires a DTLS company identifier in the recipient's address when creating a delivery note.\r\n\r\nYou can use the regular expression pattern returned by this API call to check whether the delivery note in your system contains a company identifier.\r\nOnly send the delivery note creation request to the DTLS API if your delivery note contains a DTLS company ID.\r\nThis way you avoid disclosing potentially sensitive information, and the request would  be rejected anyway.\r\n\r\nYou should check all the delivery note fields in your system that are eventually included in the `address` field of the delivery note creation request.\r\nThese may include fields like:\r\n* address\r\n* shipTo\r\n* comment\r\n* recipient\r\n* receiving_party\r\n\r\nThe pattern is meant to be case sensitive.",
        "responses": {
          "200": {
            "description": "The regular expression that you can match agains text fields to determine whether they contain a DTLS company ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v15/check_dtls_id": {
      "post": {
        "tags": [
          "Delivery Notes"
        ],
        "summary": "Check if a text field contains a DTLS company Id",
        "description": "> Before starting the process, the suppliers have two options to check if they should get a QR code for their delivery note: \r\n> 1. only send the delivery address so the DTLS system can check if it contains the DTLS Company ID or\r\n> 2. get the format of the DTLS Company ID so the supplier's ERP system can check if it contains the DTLS Company ID\r\n\r\nChecks whether the posted data field contains a DTLS company identifier.\r\n\r\nYou would typically use this to send us a field in your delivery note that might contain a DTLS company identifier, such as the address/shipTo field.\r\nThis endpoint returns whether the field contains a company identifier or not.\r\n\r\nIf your address field doesn't contain a company identifier, you probably don't want to send the delivery note to DTLS.\r\n\r\nThe endpoint doesn't validate whether the company identifier belongs to an existing company or not, it only checks for the correct company id format.",
        "requestBody": {
          "description": "The text to search for DTLS company Ids.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "1034 Budapest, Nyírfa utca 33, DTLS123456"
            },
            "text/json": {
              "schema": {
                "type": "string"
              },
              "example": "1034 Budapest, Nyírfa utca 33, DTLS123456"
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              },
              "example": "1034 Budapest, Nyírfa utca 33, DTLS123456"
            }
          }
        },
        "responses": {
          "200": {
            "description": "true if the supplied text contains a DTLS company Id, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/v15/products": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a new product",
        "description": "Register a new product with DTLS, so that it can later be referenced in delivery notes.\n\nModifying the properties of a product after creation is not supported for now.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiNewProduct"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiNewProduct"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiNewProduct"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The product was created.The created product is returned in the response body.The Location header in the response is set to the URL of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProduct"
                }
              }
            }
          },
          "202": {
            "description": "The same product already exists.\nThe existing product is returned in the response body.The Location header in the response is set to the URL of the product.The server attempts to find an already existing product with the same definition. If one exists, the id of the exsiting product is returned instead of creating a new product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProduct"
                }
              }
            }
          },
          "400": {
            "description": "Invalid product specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "413": {
            "description": "The request is too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List products",
        "description": "List products that are registered for your company.\n\nThe products are ordered so that the first ones are the ones that are most recently made available to be queried through the API.This way when polling for new products, you should only need to check the first page(s).This ordering is not necessarily the same as a descending ordering by `creationDate`, because products created through the web UImay take longer to be visible through the API.\n\nThe endpoint uses paging, so it doesn't return all products at once.To get the next page of notes call the endpoint with the `from` parameter, using the ID of the last product that you received.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "A product DTLS ID. The result will only contain items starting at (but not including) the specified one.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProduct"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The specified product ID was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The specified product cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v15/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product by DTLS ID",
        "description": "Returns a single product with the specified DTLS product identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The product's DTLS product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProduct"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id specified in path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The product specified cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiDeliveryNote": {
        "required": [
          "created",
          "customer",
          "delivery",
          "issueDate",
          "items",
          "lastUpdated",
          "status",
          "supplier",
          "supplierId",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "minLength": 1,
            "type": "string",
            "description": "A globally unique identifier for the delivery note.\r\nThis field is automatically generated on creation.\r\nThe identifier is in lowercase, and in the short format without hyphen characters.",
            "example": "c4db0608bac44a739ec752c48ba9b4da"
          },
          "qrCodeContent": {
            "type": "string",
            "description": "This is the URI that's encoded in the delivery note's QR code.\r\nThe URI is used to identify the delivery note during the reception process.",
            "format": "uri",
            "nullable": true
          },
          "created": {
            "minLength": 1,
            "type": "string",
            "description": "The date and time when this delivery note was created.",
            "format": "date-time"
          },
          "lastUpdated": {
            "minLength": 1,
            "type": "string",
            "description": "The date and time when this delivery note was last updated, most likely for a status change.",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/DeliveryNoteStatus"
          },
          "reception": {
            "$ref": "#/components/schemas/Reception"
          },
          "items": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "The products and their quantities which are listed on the delivery note.\r\nAfter reception it can optionally contain fields describing the products actually received, in the `modified...` fields"
          },
          "supplierId": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier for the delivery note, as represented in the supplier's ERP system.\r\nThe format of the note is not fixed, any identifier format can be used.\r\nThe identifier doesn't need to be globally unique, it's enough that it's unique for the current user (the one identified by the API key).",
            "example": "K20223223SL"
          },
          "issueDate": {
            "minLength": 1,
            "type": "string",
            "description": "The date and time when the delivery note was issued.\r\n\r\nThe value of this field is not verified, it can be in the far past or in the future.",
            "format": "date-time"
          },
          "supplier": {
            "$ref": "#/components/schemas/Supplier"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "delivery": {
            "$ref": "#/components/schemas/Delivery"
          },
          "netWeight": {
            "maxLength": 255,
            "type": "string",
            "description": "Total net weight of all products. Also includes weight units in the field.",
            "nullable": true,
            "example": "970 kg"
          },
          "grossWeight": {
            "maxLength": 255,
            "type": "string",
            "description": "Total gross weight of all products. Also includes weight units in the field.",
            "nullable": true
          },
          "orderNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional identifier from the manufacturer’s ERP system",
            "nullable": true,
            "example": "PO6375327"
          },
          "assignmentNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional identifier from the manufacturer’s ERP system",
            "nullable": true,
            "example": "R4-20-00179"
          },
          "referenceNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional identifier from the manufacturer’s ERP system",
            "nullable": true,
            "example": "182230/DTS"
          }
        },
        "additionalProperties": false
      },
      "ApiNewDeliveryNote": {
        "required": [
          "customer",
          "delivery",
          "issueDate",
          "items",
          "supplier",
          "supplierId"
        ],
        "type": "object",
        "properties": {
          "items": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewItem"
            },
            "description": "The products and their quantities which are listed on the delivery note.\r\nAt least one item is required."
          },
          "supplierId": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier for the delivery note, as represented in the supplier's ERP system.\r\nThe format of the note is not fixed, any identifier format can be used.\r\nThe identifier doesn't need to be globally unique, it's enough that it's unique for the current user (the one identified by the API key).",
            "example": "K20223223SL"
          },
          "issueDate": {
            "minLength": 1,
            "type": "string",
            "description": "The date and time when the delivery note was issued.\r\n\r\nThe value of this field is not verified, it can be in the far past or in the future.",
            "format": "date-time"
          },
          "supplier": {
            "$ref": "#/components/schemas/Supplier"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "delivery": {
            "$ref": "#/components/schemas/Delivery"
          },
          "netWeight": {
            "maxLength": 255,
            "type": "string",
            "description": "Total net weight of all products. Also includes weight units in the field.",
            "nullable": true,
            "example": "970 kg"
          },
          "grossWeight": {
            "maxLength": 255,
            "type": "string",
            "description": "Total gross weight of all products. Also includes weight units in the field.",
            "nullable": true
          },
          "orderNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional identifier from the manufacturer’s ERP system",
            "nullable": true,
            "example": "PO6375327"
          },
          "assignmentNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional identifier from the manufacturer’s ERP system",
            "nullable": true,
            "example": "R4-20-00179"
          },
          "referenceNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional identifier from the manufacturer’s ERP system",
            "nullable": true,
            "example": "182230/DTS"
          }
        },
        "additionalProperties": false
      },
      "ApiNewProduct": {
        "required": [
          "name",
          "unit"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the product.",
            "example": "MASTERFOL TAPE-2 20"
          },
          "unit": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the smallest undividable unit of the product.\r\nThis cannot be changed after a product is added to the DTLS database and on\r\nall delivery notes in the system the products can be listed only in this unit.\r\nE.g. a roll of electrical tape, or a can of paint.",
            "example": "roll"
          },
          "manufacturer": {
            "maxLength": 255,
            "type": "string",
            "description": "The name of the manufacturer",
            "nullable": true,
            "example": "Masterplast"
          },
          "manufacturerId": {
            "pattern": "DTLS[0-9]{6}",
            "type": "string",
            "description": "The manufacturer's company ID in the DTLS system",
            "nullable": true,
            "example": "DTLS123456"
          },
          "manufacturerItemNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "",
            "nullable": true,
            "example": "0213-04020025"
          },
          "eanCode": {
            "pattern": "[0-9]{13}",
            "type": "string",
            "description": "The standard 13 digits GTIN id of the product",
            "nullable": true,
            "example": "5996507000009"
          },
          "taxNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "The custom tariffs identifier of the product",
            "nullable": true,
            "example": "68109100"
          },
          "category": {
            "maxLength": 255,
            "type": "string",
            "description": "The building material category to which the product belongs",
            "nullable": true,
            "example": "masonry"
          },
          "packageName": {
            "maxLength": 255,
            "type": "string",
            "description": "If multiple units of a product may be packaged together, then the name of the package containing the units.\r\nE.g. a case (package_name) of beer contains _cans_ of beers (unit).",
            "nullable": true,
            "example": "pack"
          },
          "packageUnit": {
            "maxLength": 255,
            "type": "string",
            "description": "Specifies how many _units_ does this package contain",
            "nullable": true,
            "example": "24"
          },
          "palletName": {
            "maxLength": 255,
            "type": "string",
            "description": "If multiple units of a product may be packaged together, then the name of a group of unit larger than a package.\r\nUsually just 'pallet'.",
            "nullable": true,
            "example": "pallet"
          },
          "palletUnit": {
            "maxLength": 255,
            "type": "string",
            "description": "Specifies how many _unit_s a pallet of this product contains.",
            "nullable": true,
            "example": "144"
          },
          "size": {
            "maxLength": 255,
            "type": "string",
            "description": "The size of the product",
            "nullable": true,
            "example": "25m"
          },
          "netWeight": {
            "maxLength": 255,
            "type": "string",
            "description": "The net weight of the product.",
            "nullable": true,
            "example": "0.1kg"
          },
          "grossWeight": {
            "maxLength": 255,
            "type": "string",
            "description": "The gross weight of the product.",
            "nullable": true,
            "example": "0.2kg"
          },
          "productPage": {
            "maxLength": 65535,
            "type": "string",
            "description": "URL of the product's datasheet",
            "format": "uri",
            "nullable": true
          },
          "performanceStatement": {
            "maxLength": 65535,
            "type": "string",
            "description": "URL of the product's performance statement",
            "format": "uri",
            "nullable": true
          },
          "bimObject": {
            "maxLength": 65535,
            "type": "string",
            "description": "URL of the BIM object of the product",
            "format": "uri",
            "nullable": true
          },
          "otherLink": {
            "maxLength": 65535,
            "type": "string",
            "description": "Any other URL associated with the product",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiProduct": {
        "required": [
          "created",
          "id",
          "lastUpdated",
          "name",
          "status",
          "unit"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "example": "MASTERFOL TAPE-2 20"
          },
          "unit": {
            "type": "string",
            "description": "The name of the smallest undividable unit of the product.\r\nThis cannot be changed after a product is added to the DTLS database and on\r\nall delivery notes in the system the products can be listed only in this unit.\r\nE.g. a roll of electrical tape, or a can of paint.",
            "example": "roll"
          },
          "manufacturer": {
            "type": "string",
            "description": "The name of the manufacturer",
            "nullable": true,
            "example": "Masterplast"
          },
          "manufacturerId": {
            "type": "string",
            "description": "The manufacturer's company ID in the DTLS system",
            "nullable": true,
            "example": "DTLS123456"
          },
          "manufacturerItemNumber": {
            "type": "string",
            "description": "",
            "nullable": true,
            "example": "0213-04020025"
          },
          "eanCode": {
            "type": "string",
            "description": "The standard 13 digits GTIN id of the product",
            "nullable": true,
            "example": "5996507000009"
          },
          "taxNumber": {
            "type": "string",
            "description": "The custom tariffs identifier of the product",
            "nullable": true,
            "example": "68109100"
          },
          "category": {
            "type": "string",
            "description": "The building material category to which the product belongs",
            "nullable": true,
            "example": "masonry"
          },
          "packageName": {
            "type": "string",
            "description": "If multiple units of a product may be packaged together, then the name of the package containing the units.\r\nE.g. a case (package_name) of beer contains _cans_ of beers (unit).",
            "nullable": true,
            "example": "pack"
          },
          "packageUnit": {
            "type": "string",
            "description": "Specifies how many _units_ does this package contain",
            "nullable": true,
            "example": "24"
          },
          "palletName": {
            "type": "string",
            "description": "If multiple units of a product may be packaged together, then the name of a group of unit larger than a package.\r\nUsually just 'pallet'.",
            "nullable": true,
            "example": "pallet"
          },
          "palletUnit": {
            "type": "string",
            "description": "Specifies how many _unit_s a pallet of this product contains.",
            "nullable": true,
            "example": "144"
          },
          "size": {
            "type": "string",
            "description": "The size of the product",
            "nullable": true,
            "example": "25m"
          },
          "netWeight": {
            "type": "string",
            "description": "The net weight of the product.",
            "nullable": true,
            "example": "0.1kg"
          },
          "grossWeight": {
            "type": "string",
            "description": "The gross weight of the product.",
            "nullable": true,
            "example": "0.2kg"
          },
          "productPage": {
            "type": "string",
            "description": "URL of the product's datasheet",
            "format": "uri",
            "nullable": true
          },
          "performanceStatement": {
            "type": "string",
            "description": "URL of the product's performance statement",
            "format": "uri",
            "nullable": true
          },
          "bimObject": {
            "type": "string",
            "description": "URL of the BIM object of the product",
            "format": "uri",
            "nullable": true
          },
          "otherLink": {
            "type": "string",
            "description": "Any other URL associated with the product",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The DTLS product identifier of the product",
            "example": "DTLS123456123456712"
          },
          "created": {
            "type": "string",
            "description": "The date when this product was first registered with the DTLS system",
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date of the last change made to this product",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatus"
          }
        },
        "additionalProperties": false
      },
      "Customer": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Name of the company who is the customer of the delivery.",
            "example": "HufBau Akker"
          },
          "companyId": {
            "pattern": "DTLS[0-9]{6}",
            "type": "string",
            "description": "The DTLS company ID of the customer.",
            "nullable": true,
            "example": "DTLS999888"
          },
          "address": {
            "maxLength": 65535,
            "type": "string",
            "description": "Optional customer address.",
            "nullable": true,
            "example": "Hufbau sétány 123"
          }
        },
        "additionalProperties": false,
        "description": "Fields related to the customer."
      },
      "Delivery": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "recipientName": {
            "maxLength": 255,
            "type": "string",
            "description": "The name - and possibly additional info - of the person who will receive the delivery \r\nnote at the delivery address.",
            "nullable": true,
            "example": "Kovács Imre, +36204791543"
          },
          "address": {
            "maxLength": 65535,
            "minLength": 1,
            "type": "string",
            "description": "The delivery address. \r\n_Must contain a DTLS company identifier_.",
            "example": "Budapest, Bartók Béla út 42, II/4, DTLS134532"
          },
          "ekaerNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Identification number of the delivery from the Hungarian tax bureau (NAV).",
            "nullable": true
          },
          "haulierName": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the haulier company, who delivers the goods listed on the delivery note.",
            "nullable": true,
            "example": "OptiSped Kft"
          },
          "haulierCompanyId": {
            "maxLength": 255,
            "pattern": "DTLS[0-9]{6}",
            "type": "string",
            "description": "The haulier’s DTLS Company ID which the issuer might provide so that the\r\nhaulier can receive the received delivery note file digitally.",
            "nullable": true,
            "example": "DTLS555667"
          },
          "haulierComment": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Delivery address and transport information."
      },
      "DeliveryNoteStatus": {
        "enum": [
          "created",
          "received"
        ],
        "type": "string",
        "description": "The current delivery status of the delivery note.\r\n            \r\nAll delivery notes start with a `created` status, and change to the `received` status shortly after \r\nthe delivery note QR code is scanned by the recipient."
      },
      "Item": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "DTLS Product identifier. The product must already exist in DTLS.",
            "nullable": true,
            "example": "DTLS123456123456712"
          },
          "amount": {
            "maximum": 2147483647,
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The number of units ordered of this product.",
            "format": "double"
          },
          "comment": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "modifiedAmount": {
            "type": "number",
            "description": "The amount of this product actually received. Only available after reception.",
            "format": "double",
            "nullable": true
          },
          "modifierComment": {
            "type": "string",
            "description": "Comment about the reception of this item. Only available after reception.",
            "nullable": true
          },
          "modifierUser": {
            "type": "string",
            "description": "The author of the received amount and the comment about the reception. Only available after reception.",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "description": "The time when the information about the reception was created. Only available after reception.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "DTLS Product identifier. The product must already exist in DTLS.",
            "nullable": true,
            "example": "DTLS123456123456712"
          },
          "amount": {
            "maximum": 2147483647,
            "minimum": 0,
            "exclusiveMinimum": true,
            "type": "number",
            "description": "The number of units ordered of this product.",
            "format": "double"
          },
          "comment": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An item in the delivery note at creation."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProductStatus": {
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string",
        "description": "The status of the product. Only active products can be used while creating delivery notes."
      },
      "Reception": {
        "required": [
          "Date"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The username of the person who received the delivery note in the mobile application.",
            "nullable": true,
            "example": "kovacs.imre"
          },
          "company": {
            "type": "string",
            "description": "The company who actually received the materials on the construction site.",
            "nullable": true,
            "example": "Generál Kivitelező Kft."
          },
          "date": {
            "type": "string",
            "description": "The date when the delivery note was received.",
            "format": "date-time",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Contains qualitative and quantitative notes that were recorded upon receiving the delivery note.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains information about the reception of the delivery.\r\nOnly present after the status of the deliver note has been changed to `received`."
      },
      "Supplier": {
        "required": [
          "name",
          "warehouse"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Name of the company who issued the delivery note.",
            "example": "ACME Kft."
          },
          "warehouse": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The premise where the delivery note was issued.\r\n            \r\nIf the issuer doesn’t have a warehouse or a premise it can be the same as the supplier name.",
            "example": "Révay utcai telephely"
          },
          "taxNumber": {
            "maxLength": 255,
            "type": "string",
            "description": "Tax number of the company who issued the delivery note.",
            "nullable": true,
            "example": "52725916-2-05"
          },
          "address": {
            "maxLength": 65535,
            "type": "string",
            "description": "Optional address of the supplier.",
            "nullable": true,
            "example": "Révay utca 123"
          }
        },
        "additionalProperties": false,
        "description": "Fields related to the issuer of the delivery note."
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "http",
        "description": "The API key for the application must be sent in the HTTP Authorization header as such:\n```\nAuthorization: Bearer MyApiKey123\n```\nRequests without an API key or with an invalid API key will result in a HTTP 401 response code.",
        "scheme": "Bearer"
      }
    }
  },
  "security": [
    {
      "ApiKey": [ ]
    }
  ]
}