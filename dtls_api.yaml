openapi: 3.0.0
info:
  title: Digital Site Logistics Standard - Technical Guide
  version: V15
  description: |-
    ## Introduction

    The Delivery Note API is a REST API for creating delivery notes, getting a printable QR code for a delivery note and checking the status of the created delivery note.

    The Products API supports querying and creating products used in delivery notes.

    ## Security
    Access to the API is only allowed when the request contains an API key.
    The API key must be sent in the HTTP Authorization header, with the Bearer authentication scheme:

    ```
    Authorization: Bearer MyApiKey123
    ```

    Requests without an API key or with an invalid API key will result in a HTTP 401 error code.

    There are no fine-grained access rights, every API key allows clients to execute read and write operations through the API.

    The API is only accessible through HTTPS.

    ### Getting an API key
    Administering API keys is done via the BauApp web interface.

    The sandbox server accepts any API key that matches the regex `[0-9a-f]{32}`.

    ## Main use case
    The main usage scenario when creating delivery notes is the following.

    1. Create products with the [products endpoints](#tag/Products). This is optional if you already have products defined in DTLS.

    2. (Optional) Check if your delivery note contains a DTLS recipient. See the [Get the pattern for DTLS company Ids](#operation/get-company-dtls_id_pattern) section.

    3. Create a [delivery note](#tag/Delivery-Notes).
     
    4. Get the QR code for the created delivery note.

    5. Use the QR code somewhere on your physical delivery note document.

    6. Poll the delivery note for status changes. The status field of the delivery note is updated shortly after the QR code is scanned by the recipient of the delivery.

    7. Download the delivery receipt PDF.

    ## Storage of invalid requests

    The server does not store the contents of invalid or incomplete requests.

    The server may only store the request contents if the request was successful, e.g. an HTTP 2xx status code was returned.

    This means that delivery note creation requests where the receiver DTLS company is not specified are not stored, as these create requests are not valid.

    ## API Conventions

    ### Message format
    The API consumes and produces JSON messages, with the exception of the QR code endpoint, which returns an image.

    The encoding of the JSON messages must be UTF-8.

    Date fields are formatted like `2020-12-31` according to OpenAPI specs.
    Datetime values are formatted like `2020-12-31T23:59:59Z` for UTC datetimes, and `2020-12-31T23:59:59+02:00` for datetimes with an offset.

    See [http://spec.openapis.org/oas/v3.0.3#data-types](http://spec.openapis.org/oas/v3.0.3#data-types) for the specification details.

    ### Paging

    Some endpoints can potentially return a large number of objects, for example the `/products` endpoint.

    These endpoints only return a _page_ of objects at once. To receive the next page, 
    call the same endpoint with a `from` parameter. The from parameter should contain the last
    identifier received in the previous endpoint request. The response for this reques will 
    contain objects starting with (but not including) the object identified in the `from` parameter.

    To read all objects, proceed to do this in a loop until you get an empty response.

    The `from` field must contain the id of an existing object, otherwise a HTTP 404 error occurs.

    #### Example: Reading all products

    1. Make a GET request to /products, let's say you receive this page (product details are omitted for the example):
    > [
    >   { id: 'p34' },
    >   { id: 'p67' },
    >   { id: 'p23' }
    > ]

    2. Make a GET request with the last ID to `/products?from=p23`, receive this page:
    > [
    >   { id: 'p11' },
    >   { id: 'p76' }
    > ]

    Note that the product with ID p23 is not included in this page.

    3. Make a GET request with the last ID to `/products?from=p76`, receive this page:
    > []

    4. Since the response is an empty list you're done querying all products

    ### Common response codes

    Aside from the responses documented for each endpoint, the following common repsonse codes are used.

    #### HTTP 401 Unauthorized
    Returned if the API key is missing or invalid.

    #### HTTP 403 Forbidden
    The API key used for this request is valid, but is not allowed to access this resource.

    #### HTTP 404 Not found
    Commonly used when querying resources by an identifier, if that resource is not found. 

    #### HTTP 413 Payload too large
    Returned when the request body is too large. 
    This may happen if the created resource (product or delivery note) is unusually large.

    #### HTTP 429 Too many requests
    Returned when the API rate limit is exceeded.

    ## API Limitations

    ### Data retention
    The production server keeps products and delivery notes indefinitely. 
    This may change in future implementations of the API.

    The data on the sandbox server is removed on a regular basis.

    ### Rate limiting
    Rate limiting is based on the provided API key.
    If too many requests are sent in a period of time the server responds with HTTP 429 messages.

    Explicit rate limit values are to be determined later.

    Rate limits on the sandbox server may be stricter than on the production server.

    ### Request size
    The request body size of create (POST) operations is limited. See each create operation for the exact size limits.
  contact:
    name: BauApp
    url: 'https://bauapp.hu/api'
    email: hello@bauapp.com
servers:
  - url: 'https://sandbox.to_be_determined.example.net/v1'
    description: 'Sandbox environment, for testing API clients.'
  - url: 'https://to_be_determined.example.net/v1'
    description: Production environment
tags:
  - name: Delivery Notes
    description: API calls handling Delivery Notes
  - name: Products
    description: API calls handling Products
paths:
  /products:
    post:
      summary: Create a new product
      operationId: createProduct
      tags:
        - Products
      responses:
        '201':
          description: The product was created.
          headers:
            Location:
              schema:
                type: string
              description: A relative link to the newly created product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedProduct'
        '202':
          description: |-
            The same product already exists.

            The server attempts to find an already existing product with the same definition. 
            If one exists, the id of the exsiting product is returned instead of creating a new product.
          headers:
            Location:
              schema:
                type: string
              description: A relative link to the already existing product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedProduct'
        '400':
          description: |-
            Bad Request. The response body contains a human-readable description of the error.

            Possible reasons include:
            * the request body is not a valid JSON document
            * missing or invalid fields
        '413':
          description: The request is too large. The request body size for creating products is limited to 16KiB.
      description: |-
        Register a new product with DTLS, so that it can later be referenced in delivery notes.

        Modifying the properties of a product after creation is not supported for now.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
        description: The product to create.
        required: true
    get:
      summary: List products
      operationId: listProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreatedProduct'
      description: |-
        List products that are registered for your company.

        The products are ordered so that the first ones are the ones that are most recently made available to be queried through the API.
        This way when polling for new products, you should only need to check the first page(s).
        This ordering is not necessarily the same as a descending ordering by `creationDate`, because products created through the web UI
        may take longer to be visible through the API.

        The endpoint uses paging, so it doesn't return all products at once.
        To get the next page of notes call the endpoint with the `from` parameter, using the ID of the last product that you received.
      tags:
        - Products
  '/products/{productId}':
    get:
      summary: Get a product by DTLS ID
      operationId: getProduct
      tags:
        - Products
      responses:
        '200':
          description: 'OK, the body contains the product.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedProduct'
      description: Get the details of an already existing product.
    parameters:
      - $ref: '#/components/parameters/productId'
  /delivery_notes:
    post:
      summary: Create a new delivery note
      operationId: createDeliveryNote
      tags:
        - Delivery Notes
      responses:
        '201':
          description: The delivery note was created.
          headers:
            Location:
              schema:
                type: string
              description: |-
                A link to the newly created delivery note.
                The link is `/delivery_notes/{id}` where `{id}` is the `id` field supplied in the request JSON.
        '400':
          description: |-
            Bad Request. The response body contains a human-readable description of the error.

            Possible reasons include:
            * the request body is not a valid JSON document
            * missing or invalid fields
            * using field outside of the `other` field that is not defined in the schema
            * the DTLS product ID is not found
        '409':
          description: A delivery note with this id already exists.
        '413':
          description: The request is too large. The request body size for creating delivery notes is limited to 256KiB.
      description: |-
        All the products in the delivery note must be created before creating a delivery note.
        The delivery note with the specified id must not exist yet.

        The API doesn't allow updating delivery notes after creation.
        You should just create a new note if a created note contains an error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDeliveryNote'
        description: The delivery note to create.
        required: true
    get:
      summary: List delivery notes
      tags:
        - Delivery Notes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryNotes'
        '404':
          description: The delivery note specified in the `from` parameter was not found.
      operationId: listDeliveryNotes
      parameters:
        - schema:
            type: string
          in: query
          name: olderThan
          description: A delivery note ID. The result will only contain delivery notes starting at (but not including) this note.
      description: |-
        Returns delivery notes.

        The delivery notes are ordered so that the first ones are the ones that are most recently made available to be queried through the API.
        This way when polling for new orders, you should only need to check the first page(s).
        This ordering is not necessarily the same as a descending ordering by `creationDate`, because delivery notes created through the web UI
        may take longer to be visible through the API.

        The endpoint uses paging, so it doesn't return all delivery notes at once.
        To get the next page of notes call the endpoint with the `from` parameter, using the ID of the oldest (last) note that you received.
    parameters: []
  '/delivery_notes/{deliveryNoteId}':
    parameters:
      - $ref: '#/components/parameters/deliveryNoteId'
    get:
      summary: Get an existing delivery note
      tags:
        - Delivery Notes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedDeliveryNote'
      operationId: getDeliveryNote
      description: |-
        The delivery note with the id must exist, otherwise a HTTP 404 status is returned.

        The delivery note contains a few extra fields along with the ones supplied during its creation.
        See the `CreatedDelvieryNote` model definition for details.
  '/delivery_notes/{deliveryNoteId}/qr_code':
    parameters:
      - $ref: '#/components/parameters/deliveryNoteId'
    get:
      summary: Get the QR code for the delivery note
      tags:
        - Delivery Notes
      responses:
        '200':
          description: |-
            The QR code in PNG format.

            The size of the image is undefined, but has a sufficiently large resolution for printing.

            The QR code contains the same URI that is in the `uri` field of the delivery note.
          content:
            image/png:
              schema:
                type: string
                format: binary
      operationId: getDeliveryNoteQRCode
      description: |-
        Returns an image of a QR code containing a link to the delivery note.

        You can include this image on your own documents, and the QR code can be scanned with the mobile app during delivery, setting the status of the delivery note to `received`.
  '/delivery_notes/{deliveryNoteId}/receipt':
    parameters:
      - $ref: '#/components/parameters/deliveryNoteId'
    get:
      summary: Get the delivery note receipt PDF
      description: |-
        Download the receipt for the delivery note - a .pdf report confirming the delivery, with comments and information supplied by the recipient.

        Only available after the delivery note was received, see the `status` field on the delivery note.
      tags:
        - Delivery Notes
      responses:
        '200':
          description: The received delivery note PDF.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: |-
            The delivery note with the specified id was not found. 
            Also returned if the delivery note is not in the `received` state yet.
      operationId: getDeliveryNoteReceipt
  /company/dtls_id_pattern:
    get:
      summary: Get the pattern for DTLS company Ids
      tags:
        - Delivery Notes
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                example: '.*(DTLS[0-9]+).*'
                description: The regular expression that you can match agains text fields to determine whether they contain a DTLS company ID.
      operationId: get-company-dtls_id_pattern
      description: |-
        The DLTS API requires a DTLS company identifier in the recipient when creating a delivery note.
        This identifier may be contained in the `address` field mixed with address information.

        You can use the regular expression pattern returned by this API call to check whether the delivery note in your system contains a company identifier.
        Only send the delivery note creation request to the DTLS API if your delivery note contains a DTLS company ID.
        This way you avoid disclosing potentially sensitive information, and the request would  be rejected anyway.

        You should check all the delivery note fields in your system that are eventually included in the `address` field of the delivery note creation request.
        These may include fields like:
        * address
        * shipTo
        * comment
        * recipient
        * receiving_party
components:
  schemas:
    NewDeliveryNote:
      title: NewDeliveryNote
      type: object
      description: Data for creating a delivery note.
      additionalProperties: false
      properties:
        id:
          type: string
          minLength: 1
          example: K20223223SL
          description: |-
            The unique identifier for the delivery note, as 
            The format of the note is not fixed, any identifier format can be used.
            The identifier doesn't need to be globally unique, it's enough that it's unique for the current user (the one identified by the API key).
        issueDate:
          format: date-time
          type: string
          example: '2021-01-19T15:39:22Z'
          description: |-
            The date and time when the delivery note was issued.
            The value of this field is not verified, it can be in the far past or in the future.
        supplier:
          description: Fields related to the issuer of the delivery note.
          type: object
          additionalProperties: false
          required:
            - name
          properties:
            name:
              type: string
              example: ACME Kft.
              description: Name of the company who issued the delivery note.
            warehouse:
              type: string
              example: Révay utcai telephely
              description: |-
                The premise where the delivery note was issued.

                If the issuer doesn’t have a warehouse or a premise it can be the same as the supplier name.
            taxNumber:
              type: string
              example: 52725916-2-05
              description: Tax number of the company who issued the delivery note.
            address:
              type: string
              description: Optional address of the supplier.
        customer:
          description: Fields related to the customer.
          type: object
          additionalProperties: false
          required:
            - name
          properties:
            name:
              type: string
              description: Name of the company who is the customer of the delivery note.
              example: HufBau Akker
            companyId:
              type: string
              example: DTLS134532
              pattern: 'DTLS[0-9]+'
              description: |-
                The customer’s DTLS Company ID which the issuer might provide so that the customer can receive 
                the issued delivery note file digitally.
            address:
              type: string
              description: Optional customer address.
        delivery:
          description: Delivery address and transport information.
          type: object
          required:
            - address
          properties:
            recipientName:
              type: string
              description: |-
                The name - and possibly additional info - of the person who will receive the delivery 
                note at the delivery address.
              example: 'Kovács Imre, +36204791543'
            address:
              type: string
              pattern: '.*(DTLS[0-9]+)?.*'
              description: |-
                The delivery address. 
                May contain a DTLS company identifier, which identifies the receiving company.
                If there isn't a company identifier in the address, the `companyId` field is required.
              example: 'Bartók Béla út 42, II/4, DTLS134532'
            companyId:
              type: string
              example: DTLS134532
              pattern: 'DTLS[0-9]+'
              description: |-
                The customer’s DTLS Company ID which the issuer might provide so that the customer can receive 
                the issued delivery note file digitally.
                This identifier may also be supplied as a substring of the `address` field, in that case the `companyId` must match, or be empty.
                Required if there's no DTLS company identifier in the `address` field.
            ekaerNumber:
              type: string
              description: Identification number of the delivery from the Hungarian tax bureau (NAV).
            haulierName:
              type: string
              description: 'Name of the haulier company, who delivers the goods listed on the delivery note.'
            haulierCompanyId:
              type: string
              description: The haulier’s DTLS Company ID which the issuer might provide so that the haulier can receive the received delivery note file digitally.
        products:
          type: array
          minItems: 1
          description: |-
            The products and their quantities which are listed on the delivery note.
            At least one item is required.
          items:
            type: object
            additionalProperties: false
            properties:
              productId:
                type: string
                example: DTLS123456789
                pattern: 'DTLS[0-9]+'
                description: DTLS Product identifier. The product must already exist in DTLS.
              amount:
                type: integer
                format: int32
                minimum: 1
                description: The number of items of this product.
        netWeight:
          type: string
          description: Total net weight of all products. Also includes weight units in the field.
          example: 970 kg
        grossWeight:
          type: string
          description: Total gross weight of all products. Also includes weight units in the field.
          example: 1t
        other:
          type: object
          additionalProperties:
            type: string
          description: |-
            Additional key-value pairs to be stored along with this delivery note.
            This field is meant to allow storage of miscellaneous fields your ERP system might need, such as:
            - PO (Purchase order) number
            - Assignment number
            - Reference number
            - Date of purchase
            - Date of fulfillment

            Values in this field are ignored by the system.
      required:
        - id
        - issueDate
        - supplier
        - customer
        - delivery
        - products
    DeliveryNoteStatus:
      type: string
      title: DeliveryNoteStatus
      description: |-
        The current delivery status of the delivery note.

        All delivery notes start with a `created` status, and change to the `received` status shortly after 
        the delivery note QR code is scanned by the recipient.
      enum:
        - created
        - received
    CreatedDeliveryNote:
      title: CreatedDeliveryNote
      description: A delivery note after creation.
      allOf:
        - type: object
          additionalProperties: false
          properties:
            status:
              $ref: '#/components/schemas/DeliveryNoteStatus'
            uuid:
              type: string
              description: |-
                A globally unique identifier for the delivery note.
                This field is automatically generated on creation.
                The UUID is in lowercase, and in the short format without hyphen characters.
              minLength: 32
              maxLength: 32
              pattern: '[0-9a-f]+'
              example: c4db0608bac44a739ec752c48ba9b4da
            uri:
              type: string
              format: uri
              description: |-
                The URI for this delivery note in the DTLS system.
                This is the URI that's encoded in the delivery note QR code.
                It consists of a fixed base URI and the uuid of the delivery note.
              example: 'https://bauapp.hu/szallitolevel/c4db0608bac44a739ec752c48ba9b4da'
            reception:
              type: object
              additionalProperties: false
              description: |-
                Contains information about the reception of the delivery.
                Only present after the status of the deliver note has been changed to `received`.
              properties:
                name:
                  type: string
                  description: The username of the person who received the delivery note in the mobile application
                  example: kovacs.imre
                company:
                  type: string
                  example: Generál Kivitelező Kft.
                  description: The company who actually received the materials on the construction site.
                date:
                  type: string
                  format: datetime
                  example: '2021-01-25T11:29:22Z'
                  description: The exact date when the delivery note was received.
                notes:
                  type: string
                  description: |-
                    Contains qualitative and quantitative notes that were recorded 
                    upon receiving the delivery note.
                  example: Clay block - 8 instead of 10 packages
              required:
                - name
                - company
                - date
            createdDate:
              type: string
              description: The date and time when this delivery note was created in
          required:
            - status
            - uuid
            - uri
        - $ref: '#/components/schemas/NewDeliveryNote'
    NewProduct:
      title: NewProduct
      type: object
      description: Data for registering a new product with DTLS.
      additionalProperties: false
      properties:
        name:
          type: string
          minLength: 1
          description: The name of the product
          example: MASTERFOL TAPE-2 20
        manufacturer:
          type: string
          description: The name of the manufacturer
          example: Masterplast
        manufacturerId:
          type: string
          example: DTLS114101
          pattern: 'DTLS[0-9]+'
          description: The manufacturer's company ID in the DTLS system
        itemNumber:
          type: string
          example: 0213-04020025
          description: The item identifier given by the manufacturer of the product
        eanCode:
          type: string
          example: '5996507000009'
          minLength: 13
          maxLength: 13
          pattern: '[0-9]+'
          description: the standard 13 digits GTIN id of the product
        taxNumber:
          type: string
          description: the custom tariffs identifier of the product
          example: '68109100'
        category:
          type: string
          description: the building material category to which the product belongs
          example: masonry
        unit:
          type: string
          example: roll
          description: 'The name of the smallest undividable unit of the product. E.g. a _roll_ of electrical tape, or a _can_ of paint.'
        packageName:
          type: string
          example: pack
          description: |-
            'If multiple `unit`s of a product may be packaged together, then the name of the package containing 
            the units. E.g. a _case_ (package_name) of beer contains _can_s of beers (unit).
        packageUnit:
          type: number
          description: Specifies how many _unit_s does this package contain
          example: 24
        palletName:
          type: string
          description: '''If multiple `unit`s of a product may be packaged together, then the name of a group of unit larger than a `package`. Usually just ''pallet''.'
          example: pallet
        palletUnit:
          type: number
          description: Specifies how many _unit_s a pallet of this product contains.
          example: 144
        size:
          type: string
          description: The size of the product
          example: 25m
        netWeight:
          type: string
          example: 2.3kg
          description: The net weight of the product.
        grossWeight:
          type: string
          example: 2.46kg
          description: The gross weight of the product.
        productPage:
          type: string
          format: uri
          description: URL of the product's datasheet
        performanceStatement:
          type: string
          format: uri
          description: URL of the product's performance statement
        bimObject:
          type: string
          format: uri
          description: 'URL of the BIM object of the product  '
        otherLink:
          type: string
          format: uri
          description: Any other URL associated with the product
      required:
        - name
        - unit
    CreatedProduct:
      title: Product
      description: The details of a product.
      allOf:
        - type: object
          properties:
            id:
              type: string
              minLength: 1
              example: DTLS1234567890
              description: The DTLS product identifier of the product.
            created:
              type: string
              format: date-time
              description: The date when this product was first registered with the DTLS system
            lastUpdated:
              type: string
              format: date-time
              description: The date of the last change made to this product
            status:
              type: string
              enum:
                - active
                - inactive
              description: The status of the product. Only active products can be used while creating delivery notes.
          required:
            - id
            - created
            - lastUpdated
            - status
        - $ref: '#/components/schemas/NewProduct'
    DeliveryNotes:
      title: DeliveryNotes
      description: A fixed size list of delivery notes. The list is ordered by newest first.
      type: array
      items:
        $ref: '#/components/schemas/CreatedDeliveryNote'
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      description: |-
        The API key for the application must be sent in the HTTP Authorization header as such:
        ```
        Authorization: Bearer MyApiKey123
        ```
        Requests without an API key or with an invalid API key will result in a HTTP 401 error code.
  parameters:
    deliveryNoteId:
      name: deliveryNoteId
      in: path
      required: true
      schema:
        type: string
      description: 'The unique identifier of the delivery note, as supplied in the `id` field when creating the delivery note.'
    productId:
      name: productId
      in: path
      required: true
      schema:
        type: string
      description: The DTLS product identifier for a product.
  responses: {}
security:
  - BearerToken: []
